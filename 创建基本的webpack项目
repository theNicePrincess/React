1、运行 npm init -y 快速初始化项目
2、在项目根目录创建src源代码目录和dist产品目录
3、在src目录下创建index.html
4、使用 npm 安装 webpack 运行 npm install webpack -D
    npm install webpack-cli -D
    全局运行 npm i cnpm -g

5、注意： webpack4.x 提供了 约定大于配置的概念：目的是为了减少配置文件的体积
    默认约定：打包的入口是 src ->index.js
            打包输出文件是 dist -> main.js
            4.x 新增了 mode 选项（必选项） ，可选的值为 development 和 production



*****在项目中使用react*******
1、运行 npm i react react-dom -S 安装包
    react：专门用于创建组件和虚拟DOM的，同时组件的生命周期都在这个包中
    react-dom：专门进行DOM操作的，最主要的应用场景，就是ReactDOM.render()


*************基于class关键字创建组件***************
1、最基本的组件结构
 如果要使用class定义组件，必须让自己的组件继承 React.Component
 class 组件名称 extends React.Component {
   // 在组件内部，必须有render函数
   render(){
     // render 函数中，必须返回合法的 JSX 虚拟 DOM 结构
     return <div>这是 class 创建的组件</div>
   }
 }


********两种创建组件方式的对比**********
注意：使用 class 关键字创建的组件，有自己的私有数据（this.state）；但是使用 function 创建的组件没有自己的私有数据和生命周期函数；
 1、用 构造函数 创建出来的组件：叫做“无状态组件” (今后用的不多)
 2、用 class 关键字创建出来的组件：叫做“有状态组件” 【今后用的最多】
 3、什么情况下使用有状态组件？什么情况下使用无状态组件？
  有状态组件和无状态组件的本质区别：有无state属性！，有无生命周期函数
 4、组件中的 props 和 state/data 之间有什么区别？
    （1）props 中的数据都是外界传递过来的
        state/data 中的数据都是组件私有的（通过ajax获取的数据）
    （2）props 中的数据都是只读的，不能重新复制
        state/data 中的数据，都是可读可写的